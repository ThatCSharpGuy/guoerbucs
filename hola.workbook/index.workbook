---
uti: com.xamarin.workbook
platforms:
- Console
packages:
- id: System.Text.Encoding.CodePages
  version: 4.3.0
- id: System.Security.Cryptography.Algorithms
  version: 4.3.0
- id: Newtonsoft.Json
  version: 9.0.1
- id: System.IO.FileSystem
  version: 4.3.0
- id: Microsoft.Net.Http
  version: 2.2.29
- id: System.Net.Http
  version: 4.3.0
- id: System.Diagnostics.DiagnosticSource
  version: 4.3.0
- id: Jirapi
  version: 1.5.0.39
- id: System.Security.Cryptography.X509Certificates
  version: 4.3.0
- id: Flurl.Http
  version: 1.0.3
- id: System.Security.Cryptography.Primitives
  version: 4.3.0
- id: Flurl
  version: 2.2.1
- id: System.IO.FileSystem.Primitives
  version: 4.3.0
- id: System.Globalization
  version: 4.3.0
- id: System.Security.Cryptography.Encoding
  version: 4.3.0
- id: System.Reflection.TypeExtensions
  version: 4.3.0
- id: System.Linq
  version: 4.3.0
- id: Microsoft.Bcl
  version: 1.1.10
---

# Bienvenido a los Xamarin Workbooks

Con ellos, aprender a programar a .NET cobra un nuevo significado. Mira, por ejemplo, cómo se ve un “Hola mundo“ en ellos:

```csharp
Console.WriteLine("Hola mundo")
```

¿Viste cómo no es necesario terminar las sentencias con `;`?

### Declaración de variables

También podemos declarar variables y asignarlas para el documento:

```csharp
int entero; // declaración
float flotante = 10f; // Asignación
decimal x = (decimal)flotante * 3;
decimal y = x / 6;
```

### Declaración de clases

Inclusive podemos crear clases completas

Y luego, instanciarlas:

### NuGet

Oh, y también puedes insertar paquetes de *NuGet*, para hacerlo, tienes que ir a la barra de menús `Archivo > Agregar paquetes` y listo. Por ejemplo, en este Workbook agregué el paquete de [Jirapi](http://thatcsharpguy.com/post/jirapi/) que tal vez recuerdes, nos ayuda a obtener información de Pokémon.

Una vez agregado el paquete es necesario añadir una especie de directiva de preprocesamiento como si fuera un `using`:

```csharp
#r "Jirapi"
using Jirapi;
using Jirapi.Resources;
```

A partir de entonces podemos hacer uso de nuestra librería sin problema alguno:

```csharp
var cliente = new Jirapi.PokeClient();
var pikachu = await cliente.Get<Pokemon>("pikachu");
```

## Usos

Seguramente ya estarás pensando en algún uso para esta nueva herramienta. El más claro que yo tengo en mente es el poder los posts de [#AprendeCSharp.](http://thatcsharpguy.com/tag/AprendeCSharp/ "Tag #AprendeCSharp")

```csharp
// placeholder
```

### Multiplataforma

Por si mismos, los Workbooks no son más que archivos te texto plano que son interpretados por la aplicación de escritorio. Vamos a revisar precisamente este mismo archivo, estas son las primeras líneas:

```---
uti: com.xamarin.workbook
platforms:
- Console
packages:
- id: System.Text.Encoding.CodePages
  version: 4.3.0
- id: System.Security.Cryptography.Algorithms
  version: 4.3.0
- id: Newtonsoft.Json
  version: 9.0.1
```